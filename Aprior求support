def loadDataSet():
    return [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]
def createC1(dataSet):
    C1 = []
    for transaction in dataSet:
        for item in transaction:
            if not [item] in C1:
                C1.append([item])
    C1.sort()
    return list(map(frozenset, C1))                    
def scanD(D, Ck, minSupport):
    ssCnt = {}
    for tid in D:
        for can in Ck:
            if can.issubset(tid):
                if can not in ssCnt : ssCnt[can]=1
                else: ssCnt[can] += 1
    numItems = float(len(D))
    retList = []
    supportData = {}
    for key in ssCnt:
        support = ssCnt[key]/numItems          
        if support >= minSupport:
            retList.insert(0,key)
        supportData[key] = support
    return retList, supportData



def aprioriGen(Lk, k): #creates Ck ,产生新的频繁项集
    retList = []
    lenLk = len(Lk)
    for i in range(lenLk):
        for j in range(i+1, lenLk): 
            L1 = list(Lk[i])[:k-2]; L2 = list(Lk[j])[:k-2] # 因为Lk中数据的长度为k,长身Lk+1数据中先匹配k中的k-1个数据，
                                                           # 因为从0开始计数，所以k-1-1=k-2,在这个方程中为产生Lk的数据；
                                                           # 所以数据依据为Lk-1,所以查看的匹配数据为0~k-3。即[0:k-2]
            L1.sort(); L2.sort()                           
            if L1==L2:
                # print(Lk[i],Lk[j],Lk[i]|Lk[j])
                retList.append(Lk[i] | Lk[j]) 
    return retList
def apriori(dataSet, minSupport = 0.5):
    C1 = createC1(dataSet)
    D = list(map(set, dataSet))
    L1, supportData = scanD(D, C1, minSupport)
    L = [L1]
    k = 2 #此处为压缩后的数据集合
    while (len(L[k-2]) > 0):
        Ck = aprioriGen(L[k-2], k) # 数据集C2由L中的第一项创建，所以减去2,C2数据集中数据长度为2
        Lk, supK = scanD(D, Ck, minSupport)     
        supportData.update(supK)
        L.append(Lk)
        k += 1
    return L, supportData
    
def generateRules(L, supportData, minConf=0.7):  
    bigRuleList = []
    for i in range(1, len(L)):    #舍弃只有一个类别的项          
        for freqSet in L[i]:
            H1 = [frozenset([item]) for item in freqSet]
            if (i > 1): # 当频繁项集的个数超过2，考虑做进一步合并，e.g.H1=[{1},{2},{3}],这个时候可信度组合可以是(12)=>(3)
                rulesFromConseq(freqSet, H1, supportData, bigRuleList,\
                                minConf)
            else:
                calcConf(freqSet, H1, supportData, bigRuleList, minConf) 
    return bigRuleList
    
## 计算可信度时，e.g.如果由集合{1,2,3,4},首先计算{1,2,3}->{4}即三项到四项，
## 因为如果{1,2,3}->{4}不满足可信度要求，那么{1,2}->{3,4}也不会满足可信度要求，按照条件概率即可求解
def calcConf(freqSet, H, supportData, brl, minConf=0.7): #brl:bigRuleList; 
    prunedH = [] 
    for conseq in H:
        conf = supportData[freqSet]/supportData[freqSet-conseq] #可信度计算， freqSet-conseq,这里的"-"相当于差集
        if conf >= minConf:  # 当可信度大于最小可信度时，放在bigRuleList列表中
            print(freqSet-conseq,'-->',conseq,'conf:',conf) # 由freqSet-conseq=>conseq的可信度
            brl.append((freqSet-conseq, conseq, conf))
            prunedH.append(conseq)
    return prunedH
    
def rulesFromConseq(freqSet, H, supportData, brl, minConf=0.7):
    # print("H",H)
    m = len(H[0]) 
    # print("m",m)
    if (len(freqSet) > (m + 1)): # 即此时直接len(freqSet-H)>1                        
        Hmp1 = aprioriGen(H, m + 1) # Hmp1:即生成元素大小为(m+1)集合的列表 e.g.Hmp1=[frozenset{1,2},frozenset{2,3}]
        Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf) #calcConf返回满足可信度要求的关联项
        if (len(Hmp1) > 1): 
            rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf)

if __name__ == "__main__"
    dataset = loadDataSet()
    dataset
    C1 = createC1(dataset)
    D = list(map(set,dataset))
    L1,suppData0 = scanD(D,C1,0.5)
    L,suppData=apriori(dataset)
    generateRules(L, suppData)

